pragma solidity ^0.5.1;

import "./Requestable.sol";

contract Organization is Requestable {
    string public name;
    string public physicalAddress;
    string public registrationNumber;

    address[] public receivedPartnerships;
    address[] public requestedPartnerships;



// Public



    function requestPartnership (address pID) onlyOwner public { request(pID, RequestType.PARTNERSHIP); }

    function acceptPartnership (address pID) onlyOwner public { acceptRequest(pID, RequestType.PARTNERSHIP); }

    function declinePartnership (address pID) onlyOwner public { declineRequest(pID, RequestType.PARTNERSHIP); }

    function revertPartnership (address pID) onlyOwner public { revertRequest(pID, RequestType.PARTNERSHIP); }

    function cancelPartnership (address pID) public { cancelCompletedRequest(pID, RequestType.PARTNERSHIP); }



// Internal



    function customAddSentRequest (address _id, RequestType req) internal {}
    function customRemoveSentRequest (address _id, RequestType req) internal {}
    function customAddReceivedRequest (address _id, RequestType req) internal {}
    function customRemoveReceivedRequest (address _id, RequestType req) internal {}
    function customAddCompletedRequest (address _id, RequestType req) internal {}
    function customRemoveCompletedRequest (address _id, RequestType req) internal {}

    function _addSentRequestMethod (address _id, RequestType req) internal {
        if (req == RequestType.PARTNERSHIP) {
            _addRequestedPartnership(_id);
        } else {
            customAddSentRequest(_id, req);
        }
    }

    function _removeSentRequestMethod (address _id, RequestType req) internal {
        if (req == RequestType.PARTNERSHIP) {
            _removeRequestedPartnership(_id);
        } else {
            customRemoveSentRequest(_id, req);
        }
    }

    function _addReceivedRequestMethod (address _id, RequestType req) internal {
        if (req == RequestType.PARTNERSHIP) {
            _addReceivedPartnership(_id);
        } else {
            customAddReceivedRequest(_id, req);
        }
    }

    function _removeReceivedRequestMethod (address _id, RequestType req) internal {
        if (req == RequestType.PARTNERSHIP) {
            _removeReceivedPartnership(_id);
        } else {
            customRemoveReceivedRequest(_id, req);
        }
    }

    function _addCompletedRequestMethod (address _id, RequestType req) internal {
        customAddCompletedRequest(_id, req);
    }

    function _removeCompletedRequestMethod (address _id, RequestType req) internal {
        customRemoveCompletedRequest(_id, req);
    }



    function _addRequestedPartnership (address pID) internal {
        require(!_isSentRequest(pID, RequestType.PARTNERSHIP), "Already exists");
        _addAddressTo(requestedPartnerships, pID);
    }

    function _removeRequestedPartnership (address pID) internal {
        require(_isSentRequest(pID, RequestType.PARTNERSHIP), "Not found");
        _removeAddressFrom(requestedPartnerships, pID);
    }

    function _addReceivedPartnership (address pID) internal {
        require(!_isReceivedRequest(pID, RequestType.PARTNERSHIP), "Already exists");
        _addAddressTo(receivedPartnerships, pID);
    }

    function _removeReceivedPartnership (address pID) internal {
        require(_isReceivedRequest(pID, RequestType.PARTNERSHIP), "Not found");
        _removeAddressFrom(receivedPartnerships, pID);
    }



    function _addAddressTo (address[] storage array, address aID) internal { array.push(aID); }

    function _removeAddressFrom (address[] storage array, address aID) internal { _removeFromAddressArray(array, aID); }

    function _removeFromAddressArray (address[] storage array, address value) internal {
        for (uint i = 0; i < array.length; i++) {
            if (array[i] == value) {
              array[i] = array[array.length - 1];
              delete array[array.length - 1];
              array.length--;
            }
        }
    }
}

